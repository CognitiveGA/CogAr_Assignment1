Component Diagram
==================

Cognitive Architecture for Robotics – Assignment 1 (2024/25)
-------------------------------------------------------------

**Authors**:
- Francesca Amato - s7827998
- Gian Marco Balia -
- Shady Abdelmalek -

**Topic**: Post-Earthquake Scenarios for Search and Rescue

This project designs a cognitive architecture to manage a TIAGo robotic platform operating in post-earthquake environments. The robot is tasked with locating injured individuals, evaluating their medical conditions, and assessing the structural integrity of the environment.

The robot is equipped with the following sensors and devices:
- RGB-D Camera
- LiDAR
- SONAR
- Force Sensors
- Microphones
- Speakers

Primary tasks include:

- **Victim Condition Assessment**: Evaluate consciousness, responsiveness, and injury severity.
- **Structural Hazard Detection**: Identify cracks, unstable sections, and other building risks.
- **Critical Report Transmission**: Send detailed updates about victims and structures to a remote human supervisor.
- **Mission Status Notification**: Notify completion of area exploration and await further instructions.

System Architecture
--------------------

The architecture is divided into interconnected subsystems:

1. Search and Rescue Task
^^^^^^^^^^^^^^^^^^^^^^^^^

This subsystem encompasses victim detection, prioritization, and interaction.

- **Victim Detection and Reporting** component: Detects victims through RGB-D and microphone data.
  - **Interfaces**:
    - Required: ``GPS`` → ``Position``, ``Microphone`` → ``Audio``, ``RGB-D`` → ``RBD / Point Cloud / Depth / Infrared``;
    - Required:
      - ``Position`` (type ``Odometry``, Stronglytype) from the ``GPS``;
      - ``Audio`` (Stronglytype) from the ``Microphone``;
      - ``RBD / Point Cloud / Depth / Infrared`` (Stronglytype) from the ``RGB-D Camera``;
    - Provided: ``Stateless`` → ``Autonomus Navigation``;
    - Provide victim localization, ID victims, and priority levels to the ``Triage System`` and ``Autonomus Navigation``.

  - **Subscribed Topics**:
    - ``injury_detection`` (``std_msgs/msg/String``): Injury-related image and RGB-D adjusted data.
      - **Content**: JSON with:
        - ``adjusted_data`` (string): Adjusted image data.
        - ``brightness`` (float): Brightness factor.
        - ``contrast`` (float): Contrast factor.

    - ``audio_in`` (``std_msgs/msg/String``): Captured audio data from the environment.
      - **Content**: Raw audio string, typically voice or environment noise.

  - **Published Topics**:
    - ``search_rescue_audio_out`` (``std_msgs/msg/String``): Consolidated victim detection and triage status.
      - **Content**: JSON with:
        - ``detection`` (dict): Victim detection information.
          - ``timestamp`` (float): Time of detection.
          - ``confidence`` (float): Detection confidence score.
          - ``location`` (dict): Victim location (e.g., lat/lon).
          - ``source`` (string): Detection source (audio/visual).
        - ``triage`` (dict): Victim triage prioritization.
          - ``timestamp`` (float): Time of triage.
          - ``priority`` (int): Priority level (1–5).
          - ``reason`` (string): Reason for assigned priority.

- **Triage System** component:
  - Provided: Audio to Speakers, String to RT-Reporting
  - Required: RGB-D ecc from RGB-D Cameras, Status Code from Mission Status Notification
  - Interacts verbally with victims using speakers and microphones.
  - Assesses victim responsiveness through predefined verbal interactions.
  - Sends critical condition alerts to the ``Rescue Core System``.

**Interfaces**:
- ``Rescue Search Tasks`` → ``Rescue Core System``: Victim localization, triage results.
- ``Rescue Search Tasks`` → ``Rescue Communicator``: Sends detected audio prompts to be played via speakers (``search_rescue_audio_out`` topic).

2. Structural Analysis
^^^^^^^^^^^^^^^^^^^^^^

This subsystem evaluates the surrounding environment for hazards.

- **Obstacle and Damage Detection** (Component: ``Rescue Perception``):
  - Utilises LiDAR, SONAR, and RGB-D sensors.
  - Detects obstacles, cracks, and structural anomalies.
  - Provided: PointCloud to Structural Risk Assessment and Autonomous Navigation
  - Required: PointCloud ecc from Merge Data

  - **Subscribed Topics**:
    - ``/env_detection`` (``std_msgs/msg/String``): Environmental mapping data.
      - **Content**: JSON with:
        - ``points_frame_id`` (string): Frame ID reference.
        - ``sonar_range`` (float): SONAR-measured range.
        - ``point_cloud`` (list of [x, y, z] tuples): 3D obstacle points.

  - **Published Topics**:
    - ``/obstacle_position`` (``std_msgs/msg/String``): Detected obstacles or damage areas.
      - **Content**: JSON with:
        - ``timestamp`` (float): Time when detection happened.
        - ``obstacle_detected`` (bool): Whether obstacles were found.
        - ``obstacle_count_estimate`` (int): Estimated number of obstacles.
        - ``infrared_intensity`` (float): Infrared intensity measurement.
        - ``sensor_frame`` (string): Frame ID related to detection.

- **Structural Risk Assessment** (Component: ``Rescue Structural Analysis``):
  - Processes structural data received from ``Rescue Perception``.
  - Evaluates wall stability and floor conditions.
  - Sends risk assessments and safe path suggestions to ``Rescue Core System``.
  - Provided: Command to Autonomous Navigation, Structural Condition to Real-time Reporting

  - **Subscribed Topics**:
    - ``/env_detection`` (``std_msgs/msg/String``): Structural sensing input from Perception.
    - ``/imu_data`` (``std_msgs/msg/String``): IMU measurements to assess physical stress.
      - **Content**:
        - ``linear_acceleration`` (dict with x, y, z): Forces measured.
        - ``angular_velocity`` (dict with x, y, z): Rotational velocities.

  - **Published Topics**:
    - ``/risk_info`` (``std_msgs/msg/String``): Structural collapse risk evaluation.
      - **Content**: JSON with:
        - ``timestamp`` (float): Time of analysis.
        - ``stress_value`` (float): Magnitude of detected stress (normalized).
        - ``angle_variation`` (float): Detected angular shift.
        - ``collapse_risk`` (float): Risk score (0–1).
        - ``risk_level`` (string): ``HIGH`` or ``LOW`` risk classification.

**Interfaces**:
- ``Rescue Perception`` → ``Rescue Structural Analysis``: Publishes environment mapping and IMU data (``/env_detection``, ``/imu_data`` topics).
- ``Rescue Structural Analysis`` → ``Rescue Core System``: Publishes structural risk evaluations and obstacle alerts (``/risk_info``, ``/obstacle_position`` topics).

3. Communication Interface
^^^^^^^^^^^^^^^^^^^^^^^^^^

Manages the interaction between the robot and external operators.

- **Real-time Reporting** (Component: ``Rescue Communicator``):
  - Continuously sends environmental and victim updates.
  - Required: Position from GPS, Medical Report from Triage System, Id ecc from Victim Detection and Reporting, Structural Condition from Risk Assessment
  - Provided: Report to Mission Status Notification, Report to Gui Operator

  - **Subscribed Topics**:
    - *(None directly subscribed by Real-Time Reporting component)*

  - **Published Topics**:
    - ``report_update`` (``std_msgs/msg/String``): Real-time status updates sent to Mission Status Notification and GUI Operator.
      - **Content**: JSON with:
        - ``timestamp`` (float): Time when the status was generated.
        - ``status`` (string): Status description (e.g., ``"Audio captured"``, ``"System nominal"``).

- **Mission Status Notification** (Component: ``Rescue Communicator``):
  - Aggregates mission data and communicates mission completion.
  - Required: Report from Real-time Reporting, commands from GUI Operator
  - Provided: Status Code to GUI Operator and Mission Status Notification

  - **Subscribed Topics**:
    - ``report_update`` (``std_msgs/msg/String``): Receives real-time reports to aggregate mission status.

  - **Published Topics**:
    - ``mission_status`` (``std_msgs/msg/String``): Aggregated mission status and updates.
      - **Content**: JSON with:
        - ``mission_complete`` (bool): Whether the mission task is completed.
        - ``critical_alerts`` (list of strings): List of critical alerts, if any.
        - ``summary`` (string): General summary of mission status.

- **Graphical User Interface (GUI)** (External interface through ``Rescue Communicator``):
  - Displays mission reports.
  - Allows human operators to issue new commands.
  - Required: Status Code from Mission Status Notification and Report from Real-time Reporting
  - Provided: Command to Mission Status Notification and Autonomous Navigation

  - **Subscribed Topics**:
    - ``mission_status`` (``std_msgs/msg/String``): Final mission reports for GUI display.
    - ``report_update`` (``std_msgs/msg/String``): Real-time updates shown live to operators.

  - **Published Topics**:
    - ``gui_commands`` (``std_msgs/msg/String``): Commands from operator to Mission Status Notification or Autonomous Navigation.
      - **Content**: JSON with:
        - ``command_type`` (string): Type of command (e.g., ``"Pause"``, ``"Resume"``, ``"New Target"``).
        - ``parameters`` (dict): Command-specific parameters (optional).

- **Microphones** detect audio responses from victims or environmental sounds.
  - Provide: Audio to Victim Detection and Reporting and Triage System
  - **Published Topics**:
    - ``audio_in`` (``std_msgs/msg/String``): Captured audio input.
      - **Content**: Plain text or base64 encoded audio string (depending on system).

- **Speakers** deliver verbal prompts and instructions.
  - Required: Audio from Triage System
  - **Subscribed Topics**:
    - ``search_rescue_audio_out`` (``std_msgs/msg/String``): Audio commands to be spoken.
      - **Content**: Plain text message to be played aloud.

**Interfaces**:
- ``Rescue Core System`` → ``Rescue Communicator``: Publishes navigation status updates and system health reports.
- ``Rescue Communicator`` → ``Rescue Core System``: Sends operator-issued commands (from GUI) back into the system.
- ``Rescue Communicator`` → ``GUI Operator``: Provides real-time reports and mission status updates.
- ``GUI Operator`` → ``Rescue Communicator``: Sends commands and instructions for the mission.

4. Core System
^^^^^^^^^^^^^^

The brain of the robot, managing and coordinating all subsystems.

- **SLAM** (Component: ``Rescue Core System``):
  - Integrates inputs from perception, structural analysis, and search tasks.
  - Decides on movement, inspection, reporting, and interaction priorities.
  - Sends movement goals and actuation commands to ``Rescue Actuator``.
  
  - **Subscribed Topics**:
    - ``env_detection`` (``std_msgs/msg/String``): Environment mapping and obstacle detection data.
      - **Content**: JSON with:
        - ``points_frame_id`` (string): Frame ID from LiDAR.
        - ``sonar_range`` (float): SONAR range measurement.
        - ``point_cloud`` (list of [x, y, z] tuples): 3D points used to generate the map.

  - **Published Topics**:
    - ``navigation_status`` (``std_msgs/msg/String``): Status updates of navigation plans.
      - **Content**: JSON with:
        - ``status`` (string): Result status, e.g., ``SUCCESS``, ``ABORTED``.
        - ``estimated_time`` (integer): Estimated time to complete navigation (in seconds).

  - **Internal Modules**:
    - **Mapping Module**: Builds 2D/3D maps using point clouds and sonar data.
    - **Autonomous Navigation Module**: Plans navigation routes based on generated maps.

  - **Required Inputs**:
    - PointCloud and SONAR data from ``Rescue Perception`` (via ``env_detection`` topic).

  - **Provided Outputs**:
    - Navigation status updates (via ``navigation_status`` topic).
    - Navigation decisions and motion plans sent internally to ``Rescue Actuator`` (implementation details abstracted).

  - **Interfaces**:
    - ``Rescue Core System`` ← ``Rescue Perception``: Subscribes to environment detection data (``env_detection`` topic).
    - ``Rescue Core System`` → ``Rescue Actuator``: Sends navigation goals and motion commands (internal interface).
    - ``Rescue Core System`` → ``Rescue Communicator``: Sends navigation status updates (via ``navigation_status`` topic).

5. Actuator Subsystem
^^^^^^^^^^^^^^^^^^^^^^

This subsystem is responsible for executing movement commands received from the core system by controlling the robot's motors.

- **Motor Control** (Component: ``Rescue Actuator``):
  - Controls left and right motors independently based on incoming commands.
  - Executes movement patterns like forward, backward, turning, and stopping.

  - **Subscribed Topics**:
    - ``motor_commands`` (``std_msgs/msg/String``): Motor actuation commands for movement control.
      - **Content**: JSON with:
        - ``left`` (int or float): Speed value for the left motor (positive for forward, negative for backward).
        - ``right`` (int or float): Speed value for the right motor (positive for forward, negative for backward).

  - **Published Topics**:
    - *(None currently published by Actuator Node)*

- **Internal Modules**:
  - **Motor Controller**: Manages coordinated control of both left and right motors.
  - **Motors**: Low-level execution of movement commands including forward motion, backward motion, and stopping.

**Interfaces**:
- ``Rescue Core System`` → ``Rescue Actuator``: Sends motor control commands (via ``motor_commands`` topic).


6. Perception Subsystem
^^^^^^^^^^^^^^^^^^^^^^^^

Responsible for acquiring and processing raw sensory data.

- **Environmental Perception** (Component: ``Rescue Perception``):
  - Fuses RGB-D, LiDAR, and SONAR data to generate 3D maps.
  - Detects victims, obstacles, and structural damages.

  - **Subscribed Topics**:
    - ``/scan_raw`` (``sensor_msgs/msg/PointCloud2``): Raw point cloud data from LiDAR for obstacle and structure mapping.
    - ``/sonar_base`` (``sensor_msgs/msg/Range``): Range measurements for detecting nearby obstacles.
    - ``/head_front_camera/rgb/image_raw`` (``sensor_msgs/msg/Image``): RGB images for victim and injury detection.
    - ``/base_imu`` (``sensor_msgs/msg/Imu``): Inertial data (linear acceleration and angular velocity) for stability and motion analysis.
    - ``/ground_truth_odom`` (``nav_msgs/msg/Odometry``): Odometry readings serving as GPS position data.

  - **Published Topics**:
    - ``env_detection`` (``std_msgs/msg/String``): Environment mapping and obstacle detection data.
      - **Content**: JSON with:
        - ``points_frame_id`` (string): Frame ID from LiDAR.
        - ``sonar_range`` (float): SONAR range measurement.
        - ``point_cloud`` (list of [x, y, z] tuples): Example or detected points.

    - ``injury_detection`` (``std_msgs/msg/String``): Injury detection and adjusted RGB camera data.
      - **Content**: JSON with:
        - ``adjusted_data`` (string): Simulated adjusted image data.
        - ``brightness`` (float): Brightness level applied.
        - ``contrast`` (float): Contrast level applied.

    - ``imu_data`` (``std_msgs/msg/String``): Processed IMU readings.
      - **Content**: JSON with:
        - ``linear_acceleration`` (dict with x, y, z): Linear acceleration from IMU.
        - ``angular_velocity`` (dict with x, y, z): Angular velocity from IMU.

    - ``gps_position`` (``std_msgs/msg/String``): Robot position extracted from GPS/odometry.
      - **Content**: JSON with:
        - ``position`` (dict with x, y, z): Current robot position.

    - **Localization Sensors**:
      - GPS (for outdoor/global localization).
      - IMUs (Inertial Measurement Units) for enhanced accuracy indoors.

    - **Interfaces**:
      - ``Rescue Perception`` → ``Rescue Core System``: Publishes real-time mapping and obstacle information (``env_detection`` topic).
      - ``Rescue Perception`` → ``Rescue Structural Analysis``: Provides raw structural sensing data (direct data interface).

Subsystem Interaction Summary
------------------------------

- ``Rescue Perception`` provides mapping and detection data to ``Rescue Core System`` and ``Rescue Structural Analysis``.
- ``Rescue Search Tasks`` suggests search plans and reports victim findings to ``Rescue Core System``.
- ``Rescue Structural Analysis`` assesses risks and advises ``Rescue Core System``.
- ``Rescue Core System`` coordinates actions, sending motion plans to ``Rescue Actuator`` and mission updates to ``Rescue Communicator``.
- ``Rescue Actuator`` executes physical movements and reports outcomes.
- ``Rescue Communicator`` ensures continuous operator interaction and updates.

Graphical Representation
-------------------------

.. note::

   The visual component diagram summarizing these subsystems and their interactions is included below.

.. image:: images/component_diagram.png
   :alt: Component Diagram
   :align: center